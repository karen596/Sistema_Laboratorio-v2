#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Instalaci√≥n R√°pida - Sistema de Laboratorios SENA
Configura todo autom√°ticamente para despliegue inmediato
"""

import os
import sys
import secrets
import subprocess

def crear_env_produccion():
    """Crear archivo .env_produccion con valores por defecto"""
    print("üîê Generando archivo de configuraci√≥n...")
    
    # Generar claves seguras
    flask_key = secrets.token_hex(32)
    jwt_key = secrets.token_hex(32)
    
    contenido = f"""# ========================================
# CONFIGURACI√ìN DE PRODUCCI√ìN
# Sistema de Laboratorios - Centro Minero SENA
# Generado autom√°ticamente
# ========================================

# Base de Datos MySQL
HOST=localhost
USUARIO_PRODUCCION=root
PASSWORD_PRODUCCION=
BASE_DATOS=laboratorio_sistema

# Claves de Seguridad (Generadas autom√°ticamente)
FLASK_SECRET_KEY={flask_key}
JWT_SECRET_KEY={jwt_key}

# Configuraci√≥n de Flask
FLASK_ENV=production
DEBUG=False

# Configuraci√≥n de Sesi√≥n
SESSION_COOKIE_SECURE=False
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# Configuraci√≥n de JWT
JWT_TOKEN_LOCATION=headers
JWT_ACCESS_TOKEN_EXPIRES=28800
"""
    
    with open('.env_produccion', 'w', encoding='utf-8') as f:
        f.write(contenido)
    
    print("‚úÖ Archivo .env_produccion creado")
    print("\n‚ö†Ô∏è IMPORTANTE: Edita .env_produccion y configura:")
    print("   - PASSWORD_PRODUCCION (contrase√±a de MySQL)")
    print("   - USUARIO_PRODUCCION (si no es 'root')")

def crear_directorios():
    """Crear directorios necesarios"""
    print("\nüìÅ Creando directorios...")
    
    directorios = [
        'models',
        'static/css',
        'static/js',
        'static/img',
        'logs',
        'backups'
    ]
    
    for directorio in directorios:
        os.makedirs(directorio, exist_ok=True)
        print(f"  ‚úÖ {directorio}")

def verificar_mysql():
    """Verificar que MySQL est√© instalado"""
    print("\nüóÑÔ∏è Verificando MySQL...")
    
    try:
        import mysql.connector
        print("  ‚úÖ MySQL Connector instalado")
        return True
    except ImportError:
        print("  ‚ùå MySQL Connector NO instalado")
        print("  üí° Se instalar√° con requirements.txt")
        return False

def instalar_dependencias():
    """Instalar dependencias de Python"""
    print("\nüì¶ Instalando dependencias...")
    print("‚è≥ Esto puede tomar varios minutos...")
    
    try:
        subprocess.check_call([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ])
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias: {e}")
        print("\nüí° Intenta manualmente:")
        print("   pip install -r requirements.txt")
        return False

def verificar_base_datos():
    """Verificar conexi√≥n a base de datos"""
    print("\nüóÑÔ∏è Verificando base de datos...")
    
    try:
        from dotenv import load_dotenv
        import mysql.connector
        
        load_dotenv('.env_produccion')
        
        config = {
            'host': os.getenv('HOST', 'localhost'),
            'user': os.getenv('USUARIO_PRODUCCION', 'root'),
            'password': os.getenv('PASSWORD_PRODUCCION', ''),
        }
        
        conn = mysql.connector.connect(**config)
        cursor = conn.cursor()
        
        # Verificar si existe la base de datos
        cursor.execute("SHOW DATABASES LIKE 'laboratorio_sistema'")
        existe = cursor.fetchone()
        
        if existe:
            print("  ‚úÖ Base de datos 'laboratorio_sistema' encontrada")
        else:
            print("  ‚ö†Ô∏è Base de datos 'laboratorio_sistema' NO encontrada")
            print("\n  üí° Debes crear la base de datos:")
            print("     1. Abre MySQL Workbench")
            print("     2. Ejecuta: CREATE DATABASE laboratorio_sistema;")
            print("     3. Importa: datos_iniciales.sql")
        
        cursor.close()
        conn.close()
        return existe is not None
        
    except Exception as e:
        print(f"  ‚ùå Error de conexi√≥n: {e}")
        print("\n  üí° Verifica:")
        print("     - MySQL est√° corriendo")
        print("     - Credenciales en .env_produccion son correctas")
        return False

def main():
    """Ejecutar instalaci√≥n completa"""
    print("=" * 70)
    print("üöÄ INSTALACI√ìN R√ÅPIDA - SISTEMA DE LABORATORIOS SENA")
    print("=" * 70)
    
    # 1. Crear archivo de configuraci√≥n
    if not os.path.exists('.env_produccion'):
        crear_env_produccion()
    else:
        print("‚úÖ Archivo .env_produccion ya existe")
    
    # 2. Crear directorios
    crear_directorios()
    
    # 3. Verificar MySQL
    verificar_mysql()
    
    # 4. Preguntar si instalar dependencias
    print("\n" + "=" * 70)
    respuesta = input("¬øDeseas instalar las dependencias ahora? (s/n): ")
    
    if respuesta.lower() == 's':
        if instalar_dependencias():
            print("\n‚úÖ Instalaci√≥n de dependencias completada")
        else:
            print("\n‚ö†Ô∏è Instala las dependencias manualmente antes de continuar")
    else:
        print("\n‚ö†Ô∏è Recuerda instalar las dependencias:")
        print("   pip install -r requirements.txt")
    
    # 5. Verificar base de datos
    print("\n" + "=" * 70)
    verificar_base_datos()
    
    # Resumen final
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE INSTALACI√ìN")
    print("=" * 70)
    print("\n‚úÖ Configuraci√≥n creada")
    print("‚úÖ Directorios creados")
    
    print("\nüìã PR√ìXIMOS PASOS:")
    print("=" * 70)
    print("\n1. Editar .env_produccion:")
    print("   - Configurar PASSWORD_PRODUCCION")
    print("   - Verificar USUARIO_PRODUCCION")
    
    print("\n2. Configurar MySQL:")
    print("   - Crear base de datos: CREATE DATABASE laboratorio_sistema;")
    print("   - Importar datos: SOURCE datos_iniciales.sql;")
    
    print("\n3. Verificar instalaci√≥n:")
    print("   python verificar_proyecto.py")
    
    print("\n4. Iniciar servidor:")
    print("   python web_app.py")
    print("   O ejecutar: iniciar_servidor.bat")
    
    print("\n" + "=" * 70)
    print("üéØ ¬°Instalaci√≥n completada!")
    print("=" * 70)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Instalaci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante la instalaci√≥n: {e}")
        import traceback
        traceback.print_exc()
